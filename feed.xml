<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:yandex="http://news.yandex.ru"
     xmlns:media="http://search.yahoo.com/mrss/"
     xmlns:turbo="http://turbo.yandex.ru"
     version="2.0">
    <channel>
        <title>Hexlet Guides</title>
        <link>https://guides.hexlet.io/</link>
        <description>Полезные статьи и гайды для разработчиков
</description>
        <language>ru</language>
        <!-- <turbo:analytics></turbo:analytics> -->
        <!-- <turbo:adNetwork></turbo:adNetwork> -->
        
        
        <item turbo="true">
            <turbo:extendedHtml>true</turbo:extendedHtml>
            <link>https://guides.hexlet.io/version-managers/</link>
            <!-- <turbo:source></turbo:source> -->
            <!-- <turbo:topic>What Is Version Manager</turbo:topic> -->
            <title>What Is Version Manager</title>
            <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
            <author>Kirill Mokevnin</author>
            <!-- <yandex:related></yandex:related> -->
            <turbo:content>
              <![CDATA[
                <div data-block="breadcrumblist">
                  <a href="https://guides.hexlet.io/">Hexlet Guides</a>
                  <a href="https://guides.hexlet.io/version-managers/">What Is Version Manager</a>
                </div>
                <button
                  formaction="https://guides.hexlet.io/version-managers/"
                  data-background-color="#eee"
                  data-color="dark"
                  data-turbo="false"
                  data-primary="false"
                >
                  Читать полную версию на сайте
                </button>
                <h2 id="system-installation">System installation</h2>

<p>To run code in any language, you need to install its interpreter (or compiler). Different operating systems do it differently: some of them use package managers, for example, <em>apt</em> or <em>yum</em>, and some download the installer directly from repository. Some languages come preinstalled with operating system, for example, Python. In particular, Python plays a key role in the Linux OS and its distributions.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c"># Ubuntu</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>nodejs <span class="c"># installs most recent version</span>
</code></pre></div></div>
<p>The standard installation method works well only at the very beginning during the initial setup. Then, over time, different problems begin to surfase. For example, at some point a new version of the language comes out and the project you are working on requires latest version. Usually, it takes some time before the language becomes available for installation through package managers. And in this case you either have to wait, which isn’t always convenient, or look for another installation method. The last one often becomes a challenge and takes a lot of time, with hours of googling and installing additional libraries. All this eventually clogs the system and sometimes breaks it.</p>

<p>Another serious problem arise when developer requires different versions of the same language for different programs. It happens surprisingly often since there are plenty of options in development: various company projects, pet-projects, open source.</p>

<p><em>It’s important thing to mention, that all of this doesn’t concern those who have completely thrown themselves into Docker and Docker Compose. However, even in this case, languages are required to work with open source.</em></p>

<h2 id="version-managers">Version managers</h2>

<p>To solve these problems, the developers came up with version managers. A version manager is a special program designed to manage versions of a language. With its help it became possible to install the required versions and switch between them. Unlike the package managers that come with operating systems, version managers always allow to install the latest versions of languages as soon as they come out (including installing alpha and beta versions).</p>

<p>For example, you can use <a href="https://github.com/nvm-sh/nvm">NVM</a> (Node Version Manager) for Node.js:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c"># Install NVM</span>
curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
<span class="c"># Installation does not mean activation. After installation, the version that was before installation will remain active</span>
nvm <span class="nb">install </span>node <span class="c"># Install the latest available version of the node</span>
nvm <span class="nb">install </span>6.14.4 <span class="c"># or 10.10.0, 8.9.1, and so on.</span>
nvm ls-remote <span class="c"># list of available versions</span>
nvm use node <span class="c"># Activate the last installed version of the node</span>
nvm use node 17 <span class="c"># Activate the required version</span>
</code></pre></div></div>
<p>To simplify the work, version managers usually enable users to create a special file within the project that captures the required version of the language. In some cases, version managers track this file and switch versions automatically.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nb">echo</span> <span class="s2">"17"</span> <span class="o">&gt;</span> .nvmrc
<span class="c"># This command spotted .nvmrc file and used the version specified there</span>
<span class="nv">$ </span>nvm use
Found <span class="s1">'/path/to/project/.nvmrc'</span> with version &lt;17&gt;
Now using node v17
</code></pre></div></div>
<p>In today’s world its hard to imagine a language without version manager. Moreover, some of the widely used languages, such as Ruby, have many competitive version managers:</p>
<ul>
  <li>go: gvm, g</li>
  <li>java: jabba</li>
  <li>ruby: rbenv, rvm, chruby</li>
  <li>php: phpenv, phpbrew</li>
  <li>python: pyenv</li>
</ul>

<p>Version managers also solve a few more important tasks. As a rule, when a programmer interacts with a language installed directly, he has to use <em>sudo</em> when installing global packages. The fact is that the standard language installation scheme is intended for all users at once. Hence, all the necessary files, including global packages, get into shared directories that require administrative rights. From the security perspective, this is a vulnerability that developers of open source libraries can exploit (and sometimes they do). Version managers install everything in the current user’s home directory, where he already has full rights. On the one hand, this makes it possible not to run package installation as an administrator, and on the other hand, the system isn’t clogged. It’s incredibly simple to remove a language and all its packages through the version manager. All you have to do is delete the directory (although it’s better to do this using the version manager).</p>

<h2 id="universal-version-manager">Universal version manager</h2>

<p>While solving some problems version managers also cause a few others. Firstly, there are too many of them, so their popularity is constantly changing. Secondly, the process of installing the version manager can be more complicated than installing the language. The problem is that they need to be universal and work everywhere, which is extremely problematic, considering the diversity of modern ecosystems. It’s enough to look at the size of the NVM documentation to assess the scale of the disaster. Thirdly, all these managers work differently and have different commands. It complicates the process of switching between them while working with various languages.</p>

<p>All this led to the next logical step. Eventually, a universal manager <a href="https://asdf-vm.com/">asdf</a> appeared on the scene, and, thanks to plugins, is now able to work with any languages. A short list of its advantages:</p>
<ul>
  <li>A single command line utility to work with all languages</li>
  <li>A single interface for all languages</li>
  <li>Automatic switching between languages within each project</li>
  <li>A simple plugin system that allows to add any languages</li>
</ul>

<p>Now <em>asdf</em> has become quite popular and is gradually replacing every other version managers (technically, language-specific managers are more often used there). It has a bit more complex command system due to the need to support many languages, but otherwise it significantly simplifies the whole process.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c"># asdf has excellent documentation, which clearly shows how to install it,</span>
<span class="c"># and what dependencies can be required in different systems</span>
<span class="c"># Installing</span>
git clone https://github.com/asdf-vm/asdf.git ~/.asdf <span class="nt">--branch</span> v0.9
<span class="c"># Restart the terminal after that</span>
<span class="nb">echo</span> <span class="s1">'. $HOME/.asdf/asdf.sh'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="c"># To work with a particular language, it's necessary to install the respective plugin</span>
<span class="c"># The list of available plugins is on the project website</span>
asdf plugin add nodejs
<span class="c"># Language installing</span>
<span class="c"># Instead of nodejs, you need to substitute the name of the plugin you are working with</span>
asdf <span class="nb">install </span>nodejs latest <span class="c"># latest means the latest version of the required language</span>
<span class="c"># Installing the required version</span>
asdf <span class="nb">install </span>nodejs latest
<span class="c"># Installing the required language version by default</span>
asdf global nodejs latest
<span class="c"># Shows current language versions installed through asdf</span>
asdf current
elixir         1.10.1-otp-22 <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
erlang         22.2.7   <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
nodejs         17.0.0   <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
php            7.4.5    <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
python         3.8.2 2.7.16 <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
ruby           2.7.0    <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
yarn           1.22.4   <span class="o">(</span><span class="nb">set </span>by /Users/user/.tool-versions<span class="o">)</span>
</code></pre></div></div>
<h2 id="conclusion">Conclusion</h2>

<p>Working with different versions of languages is a challenging task, which can be simplified through the use of version managers and docker (for advanced users). Among all managers, <em>asdf</em> stands out and at the same time becomes a universal tool for managing any languages and even regular programs.</p>

              ]]>
            </turbo:content>
        </item>
        
        <item turbo="true">
            <turbo:extendedHtml>true</turbo:extendedHtml>
            <link>https://guides.hexlet.io/how_to_search/</link>
            <!-- <turbo:source></turbo:source> -->
            <!-- <turbo:topic>How to search for technical information</turbo:topic> -->
            <title>How to search for technical information</title>
            <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
            <author>Kirill Mokevnin</author>
            <!-- <yandex:related></yandex:related> -->
            <turbo:content>
              <![CDATA[
                <div data-block="breadcrumblist">
                  <a href="https://guides.hexlet.io/">Hexlet Guides</a>
                  <a href="https://guides.hexlet.io/how_to_search/">How to search for technical information</a>
                </div>
                <button
                  formaction="https://guides.hexlet.io/how_to_search/"
                  data-background-color="#eee"
                  data-color="dark"
                  data-turbo="false"
                  data-primary="false"
                >
                  Читать полную версию на сайте
                </button>
                <p><strong>One of the most important skills for a programmer is the ability to find answers and solve problems using Google. A lot of the problems that beginners face have already been solved and described before. All you need is to learn how to find these solutions and answers.</strong></p>

<h2 id="websites">Websites</h2>

<p>The main sites to get your questions answered:</p>
<ul>
  <li><a href="https://github.com">GitHub</a></li>
  <li><a href="https://stackoverflow.com">Stackoverflow</a></li>
</ul>

<h2 id="language">Language</h2>

<p>As practice shows, at the beginning most programmers try to search for information in their native language. Sometimes you can find the answer this way, but more often — no. <strong>The universal language for programmers is English</strong> – the whole world speaks it. The amount of information in the English-speaking segment is noticeably higher than in any other. Besides it’s a lot fresher. Learn to formulate your thoughts more accurately, and while searching - compose a set of words in English. This way you will master the terminology faster.</p>
<div class="fs-3 border-start p-4 mb-3 bg-light border-info border-3 banner">
    <a href="https://ru.code-basics.com/?utm_source=hexlet-guides&amp;utm_medium=referral" target="_blank">Code Basics: бесплатные курсы программирования
</a>
</div>

<h2 id="search-engine">Search engine</h2>

<p>To continue the previous section it’s important to note that the best way to search for information is using Google. Although local search engines are fine for certain tasks, the English-speaking segment isn’t their main market, and they are much inferior to Google. For example, you will notice that after a while Google adapts to your queries and starts showing more relevant links. It can understand which programming language you prefer and will output the related answers.</p>

<p>Another important point: Google search works even better than site search. If you need something, for example, on Github, it’s better to make the proper Google query to get a better and faster result. The below section “query language” provides further details.</p>

<h2 id="query-language">Query language</h2>

<p>Each search engine has a query language. It includes special search operators allowing you to specify more precisely what you want. Here are a few common search techniques:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">site:stackoverflow.com how to test react code</code> — this search will be performed through <a href="https://stackoverflow.com/">Stackoverflow</a>.</li>
  <li><code class="language-plaintext highlighter-rouge">add class to element -jquery</code> — a hyphen denotes stop words, therefore, all variants excluding these words will be found.</li>
  <li><code class="language-plaintext highlighter-rouge">"immutable js"</code> — double quotes indicating to look for an exact match.</li>
</ul>

<p>The full list can be found <a href="https://support.google.com/websearch/answer/2466433?visit_id=1-636424030566191968-2246914586&amp;p=adv_operators&amp;hl=en&amp;rd=1">on the Google support site</a>.</p>

<h2 id="library-search">Library search</h2>

<p>The vast majority of libraries are located (they say, “hosted”) on <a href="https://github.com">GitHub</a>. Let’s say you need to find a library for executing HTTP requests in JavaScript. To do this you can form the following request: <code class="language-plaintext highlighter-rouge">github js http client</code>. Google will show you a dozen links to different repositories. Of course, you can also use the query language: <code class="language-plaintext highlighter-rouge">site:github.com js http client</code>, but generally it’s enough to simply indicate <code class="language-plaintext highlighter-rouge">github</code>.
The same search strategy can be used for well-known libraries: <code class="language-plaintext highlighter-rouge">github express</code>.</p>

<h2 id="search-by-error-message">Search by error message</h2>

<p>Before you search by error message, it’s necessary to understand where <em>the error message</em> is here exactly. Although the output contains a lot of relevant information, it’s not a description of this error. For example:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>There was 1 failure:
1<span class="o">)</span> App<span class="se">\S</span>olutionTest::testResult with data <span class="nb">set</span> <span class="c">#2 (0, 2, 2, 1, 2)</span>
Failed asserting that <span class="s1">'1'</span> matches expected 0.
/usr/src/app/tests/App/Tests/SolutionTest.php:15
FAILURES!
Tests: 3, Assertions: 3, Failures: 1.
Makefile:2: recipe <span class="k">for </span>target <span class="s1">'test'</span> failed
make: Leaving directory <span class="s1">'/usr/src/app'</span>
make: <span class="k">***</span> <span class="o">[</span><span class="nb">test</span><span class="o">]</span> Error 1
</code></pre></div></div>

<p>The output has a lot of text but there is only one real error message: <code class="language-plaintext highlighter-rouge">Failed asserting that '1' matches expected 0.</code>. In this particular case, it’s approximately clear what is wrong and where to look (the file and line are indicated in the stack trace below). But so happens not always. If you correctly identified the error message, you may also want to do one thing. Often such messages are personalized: they take specific values of parameters that relate to your environment. For example, paths to files. Hence, if you search throughout the error message, then most likely Google won’t find anything. For example, in the message above, such parameters are <code class="language-plaintext highlighter-rouge">'1'</code> and <code class="language-plaintext highlighter-rouge">0</code>. If you clear the phrase, there will be <code class="language-plaintext highlighter-rouge">Failed asserting that matches expected</code>. That’s what you have to look for. You can also add language name: <code class="language-plaintext highlighter-rouge">php Failed asserting that matches expected</code>.</p>

<h2 id="behavior-search">Behavior search</h2>

<p>Sometimes an error message is either missing or cannot lead to a correct answer (since it’s a consequence, not a cause). At this point, you need to be creative and make a sentence in English. A set of keywords will also work. If the search wasn’t successful then try to add <code class="language-plaintext highlighter-rouge">site:stackoverflow.com</code>. Stackoverflow is a unique place having answers to almost all similar questions.
If you know which library or program exactly the error belongs to, it would be useful to find its repository on Github and study the Issues section. If there definitely is an error, and it’s relevant, then most certainly someone has already mentioned it.</p>

<h2 id="official-documentation">Official documentation</h2>

<p>Search is good but don’t forget to look into the official documentation for tools (including programming languages). Official (and not only) documentation, as a rule, is divided into following types:</p>

<ol>
  <li><a href="https://guides.rubyonrails.org/getting_started.html">Getting Started</a> is a small (not always) step-by-step guide helping to create a minimal working version and quickly start working with the tool to see it in action. It’s the first document you need to look for.</li>
  <li><a href="https://laravel.com/docs/5.5/routing">Guides</a> are descriptions of the tool components. They are written in a narrative form, so it’s not hard to read them from start to finish. They make it easier to learn large blocks of information.</li>
  <li><a href="https://bit.ly/2uq98XM">API</a> is a concise documentation on all possible application functions. It is more intended for finding answers to specific questions.</li>
  <li><a href="https://blog.codeship.com/an-introduction-to-apis-with-phoenix/">Tutorials</a>, in contrast to quides, are aimed at various options for using the tool.</li>
</ol>

              ]]>
            </turbo:content>
        </item>
        
        <item turbo="true">
            <turbo:extendedHtml>true</turbo:extendedHtml>
            <link>https://guides.hexlet.io/error_tracking/</link>
            <!-- <turbo:source></turbo:source> -->
            <!-- <turbo:topic>What is Error Tracking?</turbo:topic> -->
            <title>What is Error Tracking?</title>
            <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
            <author>Kirill Mokevnin</author>
            <!-- <yandex:related></yandex:related> -->
            <turbo:content>
              <![CDATA[
                <div data-block="breadcrumblist">
                  <a href="https://guides.hexlet.io/">Hexlet Guides</a>
                  <a href="https://guides.hexlet.io/error_tracking/">What is Error Tracking?</a>
                </div>
                <button
                  formaction="https://guides.hexlet.io/error_tracking/"
                  data-background-color="#eee"
                  data-color="dark"
                  data-turbo="false"
                  data-primary="false"
                >
                  Читать полную версию на сайте
                </button>
                <p>There are no programs without errors. Their number can be reduced with the great help of a type system, linters, tests, or even a whole department of testers, but it’s impossible to remove them completely. This is the reality we must face; the best thing we can do is learning how to track these errors and fix them as soon as possible.</p>

<h2 id="how-you-shouldnt-work-with-errors">How you shouldn’t work with errors</h2>

<p>It’s quite common in development: programmers write some code, release a new version of a website or application and move on. In the meantime, some users start experiencing problems: something freezes or crashes, issues with sending forms out, data being displayed incorrectly, and so on. This may last long enough for someone to lose patience and finally complain to the support service. Then, along the chain, it makes it to the programmers, and they try to find the root cause behind the error, when it began or who caused the bug to happen. The clarification of all the details begins, and most likely with the participation of users who are willing to help. With this approach, a huge number of errors remain unnoticed for a very long time, and the worst part is that users leave. Can we avoid this? Clearly, we can.</p>

<h2 id="how-to-work-with-errors">How to work with errors</h2>

<p>There are plenty of services called Error Trackers. They collect information about occurring errors in real time and notify the development team. These services integrate with a multitude of available platforms, from televisions to mobile applications and websites (both frontend and backend).</p>

<p><img src="/assets/images/error-tracking/rollbar-dashboard.jpg" alt="Rollbar Dashboard" /></p>

<p>Above is a screenshot of a dashboard service <a href="https://rollbar.io/">rollbar.io</a> which we use for all our Hexlet projects. You can track the frequency of critical errors in the last 24 hours for each project. This graph with performance metrics helps you diagnose issues immediately. Below is the output of specific project’s errors. According to the icons, most of the errors are caused by JavaScript.</p>

<p><img src="/assets/images/error-tracking/rollbar-project.jpg" alt="Rollbar Project" /></p>

<p>Each such service provides libraries for different languages and platforms, they are usually added to the code and called on in case of errors. These libraries send not just the error but also additional useful information about the environment. Such information may include data about users, their browsers, application settings, and more.</p>

<p>Ideally, that kind of library is already <a href="https://docs.rollbar.com/docs/rails">integrated</a> into a framework, for example, Rails. Then you hardly have to configure anything. You just connect the library to the framework as a plugin and it will start detecting errors by itself, without extra interaction. If there is no such integration, well.. then you’ll have to write some code to link your application to the library. You can find more information on how to do this in the service documentation. <a href="https://docs.rollbar.com/docs/react">Here</a> is an example of Rollbar integrated into React. Once the connection is successfully established, the detected error will look like this:</p>

<p><img src="/assets/images/error-tracking/rollbar-error.jpg" alt="Rollbar Error" /></p>

<p>If we take a closer look at the top menu, we can see that tabs provide very useful information about errors.</p>

<p>But detecting an error is only half of it. You then need to notify the team somehow without flooding everyone with spam. The thing is that errors usually don’t occur just once. If it’s a common error and the number of users is high, then you can easily catch one error thousands of times per minute. And if there is a notification for each occurrence (by email or in Slack), then such a service wouldn’t work for long.</p>

<p><img src="/assets/images/error-tracking/rollbar-notifications.jpg" alt="Rollbar Error" /></p>

<p>That’s why such trackers work more effectively. When the error occurs for the first time, the service notifies the development team with real-time alerts so that they can quickly address it. If it happens once again, then no more alerts. At least not every time. For example, alerts can be sent at the first, tenth, hundredth, thousandth and so on as they occur. This is the first part. Further, after updating the application version, trackers label errors as “corrected”. This makes it much easier to track errors that developers either forgot to fix or did not fix properly. Most often, alerts start pouring in after the deployment. In order to prevent future issues, you need to notify the tracker service about deploys. You can read more about this in the <a href="https://docs.rollbar.com/docs/deploy-tracking">documentation area</a> of the relevant tracker.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Error trackers are very important tools, and it’s hard to imagine production without using them. At that one of many services or specialized software can act as an error  tracker (for example, <a href="https://github.com/getsentry/sentry">Sentry</a>), a service installed on servers in case of high security requirements.</p>

              ]]>
            </turbo:content>
        </item>
        
    </channel>
</rss>
